# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, develop, test_keybase ]
  pull_request:
    branches: [ master, develop, test_keybase ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - run: |
        git fetch --prune --unshallow
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: setup-docker
      uses: docker-practice/actions-setup-docker@0.0.1
    # - name: Checkout
    #   uses: actions/checkout@v2
    #   with:
    #     path: build
    #     repository: mocaccinoOS/singularity-micro
    #     ref: master

    # https://github.community/t/worker-running-out-of-disk-space/18245
    - name: Patch Docker Daemon data-root
      run: |
        DOCKER_DATA_ROOT='/mnt/var/lib/docker'
        DOCKER_DAEMON_JSON='/etc/docker/daemon.json'
        sudo mkdir -p "${DOCKER_DATA_ROOT}"
        jq --arg dataroot "${DOCKER_DATA_ROOT}" '. + {"data-root": $dataroot}' "${DOCKER_DAEMON_JSON}" > "/tmp/docker.json.tmp"
        sudo mv "/tmp/docker.json.tmp" "${DOCKER_DAEMON_JSON}"
        sudo systemctl restart docker
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.14.3' # The Go version to download (if necessary) and use.
    - name: Install and Build ðŸ”§ # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
      env:
        PREVIOUS: ${{ github.event.before }}
      run: |
        make deps
        git clone https://github.com/mudler/luet.git
        cd luet
        git checkout develop
        make build && sudo cp -rfv luet /usr/bin/luet
        cd ..
        rm -rf luet
        curl -LO https://storage.googleapis.com/container-diff/latest/container-diff-linux-amd64 && chmod +x container-diff-linux-amd64 && sudo mv container-diff-linux-amd64 /usr/local/bin/container-diff
        make build-all create-repo
    - name: Deploy ðŸš€
      run: |
        curl https://gist.githubusercontent.com/mudler/4fc89a4318e9987509727d4f5b47f546/raw/49e3cb612f8e9885082526744e2d8444320861c5/keybase.sh > keybase.sh

        docker run --rm \
        -e KEYBASE_DEVICENAME=$KEYBASE_DEVICENAME -e KEYBASE_USERNAME="$KEYBASE_USERNAME" \
        -e KEYBASE_PAPERKEY="$KEYBASE_PAPERKEY" \
        -e KEYBASE_SERVICE=1 -v $PWD:/data -v $PWD/keybase.sh:/keybase.sh \
        keybaseio/client:stable \
        bash /keybase.sh fs rm -r '/keybase/public/mocaccino/micro/*' || true

        docker run --rm \
        -e KEYBASE_DEVICENAME=$KEYBASE_DEVICENAME -e KEYBASE_USERNAME="$KEYBASE_USERNAME" \
        -e KEYBASE_PAPERKEY="$KEYBASE_PAPERKEY" \
        -e KEYBASE_SERVICE=1 -v $PWD/build:/data -v $PWD/keybase.sh:/keybase.sh \
        keybaseio/client:stable \
        bash /keybase.sh fs cp -r -f '/data/*' /keybase/public/mocaccino/micro
      env:
        KEYBASE_DEVICENAME: ${{ secrets.KEYBASE_DEVICENAME }}
        KEYBASE_PAPERKEY: ${{ secrets.KEYBASE_PAPERKEY }}
        KEYBASE_USERNAME: ${{ secrets.KEYBASE_USERNAME }}
